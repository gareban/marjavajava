BaseActivity
package com.android.msahakyan.fma.activity;

import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;

import butterknife.ButterKnife;

/**
 * @author msahakyan
 */

public abstract class BaseActivity extends AppCompatActivity {

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        super.onCreate(savedInstanceState);
        setupNavigationComponent();
    }

    protected abstract void setupNavigationComponent();
}
----------------------------------------------------------------------------------------------------
MainActivity
package com.android.msahakyan.fma.activity;

import android.app.SearchManager;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.application.FmaApplication;
import com.android.msahakyan.fma.di.module.NavigationModule;
import com.android.msahakyan.fma.fragment.NavigationManager;
import com.android.msahakyan.fma.fragment.SearchSuggestionsFragment;
import com.android.msahakyan.fma.view.SearchView;

import javax.inject.Inject;

import butterknife.Bind;
import butterknife.ButterKnife;
import timber.log.Timber;

public class MainActivity extends BaseActivity {

    @Inject
    NavigationManager navigationManager;

    @Bind(R.id.toolbar)
    Toolbar toolbar;

    private MenuItem mSearchItem;
    private SearchSuggestionsFragment mSearchFragment;
    private ActionBar actionBar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);

        setSupportActionBar(toolbar);
        actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayShowHomeEnabled(true);
        }

        navigationManager.showMainPagerFragment();
    }

    @Override
    protected void setupNavigationComponent() {
        FmaApplication.get(this).getApplicationComponent()
            .plus(new NavigationModule(this)).inject(this);
    }

    public void pressBack() {
        super.onBackPressed();
    }

    @Override
    public void onBackPressed() {
        navigationManager.onBackPress();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_main, menu);

        mSearchItem = menu.findItem(R.id.item_search);
        // Associate searchable configuration with the SearchView
        setSearchableConfiguration();

        return true;
    }

    private void setSearchableConfiguration() {
        SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
        final SearchView searchView = (SearchView) MenuItemCompat.getActionView(mSearchItem);

        // Assumes current activity is the searchable activity
        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
        searchView.setIconified(true);

        searchView.setOnSearchClickListener(v -> {
            searchView.showCloseButton(false);
            if (actionBar != null) {
                actionBar.setDisplayHomeAsUpEnabled(true);
            }
            showSearchSuggestionsFragment();
        });
    }

    private void showSearchSuggestionsFragment() {
        if (mSearchFragment == null) {
            navigationManager.showSearchSuggestionsFragment();
        }
    }

    public void showSearchIcon(boolean show) {
        if (mSearchItem != null) {
            mSearchItem.setVisible(show);
        }
    }

    public void setSearchFragment(SearchSuggestionsFragment searchFragment) {
        this.mSearchFragment = searchFragment;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem menuItem) {
        if (menuItem.getItemId() == android.R.id.home) {
            Timber.d("Home button pressed");
            navigationManager.onBackPress();
            if (actionBar != null) {
                actionBar.setDisplayHomeAsUpEnabled(false);
            }
        }
        return super.onOptionsItemSelected(menuItem);
    }

    @Override
    protected void onDestroy() {
        ButterKnife.unbind(this);
        super.onDestroy();
    }

    public NavigationManager getNavigationManager() {
        return navigationManager;
    }
}
------------------------------------------------------------------------------------------------------
SplashScreenActivity
package com.android.msahakyan.fma.activity;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.Toast;
import android.widget.VideoView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.util.Constants;
import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.ads.MobileAds;

import org.json.JSONException;

import io.branch.referral.Branch;
import timber.log.Timber;

public class SplashScreenActivity extends AppCompatActivity {

 private static final int MY_PERMISSIONS_REQUEST=2;
    private InterstitialAd mInterstitialAd;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash_screen);

        MobileAds.initialize(this, "ca-app-pub-3940256099942544~3347511713");
        mInterstitialAd = new InterstitialAd(this);
        mInterstitialAd.setAdUnitId("ca-app-pub-3940256099942544/1033173712");
        mInterstitialAd.loadAd(new AdRequest.Builder().build());
        mInterstitialAd.setAdListener(new AdListener() {
            @Override
            public void onAdLoaded() {
                // Code to be executed when an ad finishes loading.
            }

            @Override
            public void onAdFailedToLoad(int errorCode) {
                // Code to be executed when an ad request fails.
            }

            @Override
            public void onAdOpened() {
                // Code to be executed when the ad is displayed.
            }

            @Override
            public void onAdLeftApplication() {
                // Code to be executed when the user has left the app.
            }

            @Override
            public void onAdClosed() {
                Intent intent = new Intent(SplashScreenActivity.this, MainActivity.class);
                startActivity(intent);
                finish();
                // Code to be executed when when the interstitial ad is closed.
            }
        });









        new CountDownTimer(3000, 1000) {

            public void onTick(long millisUntilFinished) {

            }

            public void onFinish() {
                writepermi();
            }
        }.start();

    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {


                    Intent intent = new Intent(SplashScreenActivity.this, MainActivity.class);
                    startActivity(intent);
                    finish();
                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.

                } else {

                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }
                return;
            }

            // other 'case' lines to check for other
            // permissions this app might request
        }
    }
void writepermi(){



    if (ContextCompat.checkSelfPermission(SplashScreenActivity.this,
            Manifest.permission.WRITE_EXTERNAL_STORAGE)
            != PackageManager.PERMISSION_GRANTED) {

        // Should we show an explanation?
        if (ActivityCompat.shouldShowRequestPermissionRationale(SplashScreenActivity.this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE)) {

            ActivityCompat.requestPermissions(SplashScreenActivity.this,
                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                    MY_PERMISSIONS_REQUEST);

        } else {

            // No explanation needed, we can request the permission.

            ActivityCompat.requestPermissions(SplashScreenActivity.this,
                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                    MY_PERMISSIONS_REQUEST);

            // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
            // app-defined int constant. The callback method gets the
            // result of the request.
        }
    } else {

        if (mInterstitialAd.isLoaded()) {
            mInterstitialAd.show();
        } else {
            Intent intent = new Intent(SplashScreenActivity.this, MainActivity.class);
            startActivity(intent);
            finish();
        }


    }




}



}
-------------------------------------------------------------------------------------------------------------
AdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.view.ViewGroup;

/**
 * @param <T> the type of adapters data source i.e. List<Accessory>
 */
public interface AdapterDelegate<T> {

    /**
     * Called to determine whether this AdapterDelegate is the responsible for the given data
     * element.
     *
     * @param items    The data source of the Adapter
     * @param position The position in the datasource
     * @return true, if this item is responsible,  otherwise false
     */
    boolean isForViewType(@NonNull T items, int position);

    /**
     * Returns item viewType
     *
     * @return
     */
    int getItemViewType();

    /**
     * Creates the  {@link RecyclerView.ViewHolder} for the given data source item
     *
     * @param parent The ViewGroup parent of the given datasource
     * @return The new instantiated {@link RecyclerView.ViewHolder}
     */
    @NonNull
    RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent);

    /**
     * Called to bind the {@link RecyclerView.ViewHolder} to the item of the datas source set
     *
     * @param items    The data source
     * @param position The position in the datasource
     * @param holder   The {@link RecyclerView.ViewHolder} to bind
     */
    void onBindViewHolder(@NonNull T items, int position, @NonNull RecyclerView.ViewHolder holder);

    /**
     * Returns span size for the current view type
     *
     * @return {@link int}
     */
    int getSpanSize();
}
----------------------------------------------------------------------------------------------------------------
AdapterDelegatesManager
package com.android.msahakyan.fma.adapter.delegates;

import android.support.annotation.NonNull;
import android.support.v4.util.SparseArrayCompat;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.ViewGroup;

/**
 * @author msahakyan
 */
public class AdapterDelegatesManager<T> {

    public static final String TAG = AdapterDelegatesManager.class.getSimpleName();
    private static final int NO_TYPE = -1;

    private SparseArrayCompat<AdapterDelegate<T>> mDelegates;

    public AdapterDelegatesManager() {
        mDelegates = new SparseArrayCompat<>();
    }

    /**
     * Adds {@link AdapterDelegate<T>} to adapter delegates manager
     *
     * @param delegate
     * @return
     */
    public AdapterDelegatesManager<T> addDelegate(@NonNull AdapterDelegate<T> delegate) {
        int itemViewType = delegate.getItemViewType();
        if (mDelegates.get(itemViewType) == null) {
            mDelegates.put(itemViewType, delegate);
        } else {
            Log.d("TAG", "The delegate for viewType: " + itemViewType + " has been already registered.");
        }
        return this;
    }

    /**
     * Returns either null or viewType for the given delegate
     *
     * @param items
     * @param position
     * @return
     */
    public int getItemViewType(@NonNull T items, int position) {
        AdapterDelegate<T> delegate = getDelegateForViewType(items, position);
        return delegate == null ? NO_TYPE : delegate.getItemViewType();
    }

    /**
     * Calls on creation of viewHolder
     *
     * @param parent
     * @param viewType
     * @return
     */
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        AdapterDelegate<T> delegate = mDelegates.get(viewType);
        if (delegate == null) {
            Log.e(TAG, "Couldn't find delegate for viewType: " + viewType);
            return null;
        }
        return delegate.onCreateViewHolder(parent);
    }

    /**
     * Calls on bind of viewHolder
     *
     * @param items
     * @param position
     * @param viewHolder
     */
    public void onBindViewHolder(@NonNull T items, int position, @NonNull RecyclerView.ViewHolder viewHolder) {
        AdapterDelegate<T> delegate = mDelegates.get(viewHolder.getItemViewType());
        if (delegate == null) {
            Log.e(TAG, "Couldn't find delegate for viewType: " + viewHolder.getItemViewType());
            return;
        }
        delegate.onBindViewHolder(items, position, viewHolder);
    }

    private AdapterDelegate<T> getDelegateForViewType(@NonNull T items, int position) {
        final int size = mDelegates.size();
        for (int i = 0; i < size; i++) {
            AdapterDelegate<T> delegate = mDelegates.valueAt(i);
            if (delegate.isForViewType(items, position)) {
                return delegate;
            }
        }
        return null;
    }

    public void clear() {
        mDelegates.clear();
    }
}
---------------------------------------------------------------------------------------------------------------------------------
AlbumAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.v4.view.ViewCompat;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.adapter.ItemClickListener;
import com.android.msahakyan.fma.model.Album;
import com.android.msahakyan.fma.util.Item;
import com.android.msahakyan.fma.view.FadeInNetworkImageView;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * @author msahakyan
 */

public class AlbumAdapterDelegate extends BaseAdapterDelegate {

    private final ItemClickListener<Item> listener;

    public AlbumAdapterDelegate(Context ctx, ItemClickListener<Item> listener) {
        super(ctx, TYPE_ALBUM);
        this.listener = listener;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {
        return new AlbumViewHolder((ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.list_item_album, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull List<Item> items, int position, @NonNull RecyclerView.ViewHolder holder) {
        final Album album = (Album) items.get(position);
        AlbumViewHolder viewHolder = (AlbumViewHolder) holder;

        viewHolder.title.setText(album.getTitle());

        viewHolder.imageView.setImageResource(R.drawable.img_placeholder);
        viewHolder.imageView.setImageUrl(album.getImageFile(), imageLoader);

        viewHolder.artistName.setText(album.getArtistName());
        viewHolder.imageView.setOnClickListener(v -> {
            if (listener != null) {
                listener.onItemClicked(album, viewHolder);
            }
        });

        viewHolder.trackCount.setText(String.valueOf(album.getTracksCount()));

        // It is important that each shared element in the source screen has a unique transition name.
        // For example, we can't just give all the images in our grid the transition name "some_name"
        // because then we would have conflicting transition names.
        // By appending "_image" to the position, we can support having multiple shared elements in each
        // grid cell in the future.
        ViewCompat.setTransitionName(viewHolder.imageView, position + "_image");
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        return (items.get(position) instanceof Album) && super.isForViewType(items, position);
    }

    public static class AlbumViewHolder extends RecyclerView.ViewHolder {
        @Bind(R.id.album_image)
        public FadeInNetworkImageView imageView;
        @Bind(R.id.album_title)
        TextView title;
        @Bind(R.id.artist_name)
        TextView artistName;
        @Bind(R.id.track_count)
        TextView trackCount;

        AlbumViewHolder(ViewGroup view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------
ArtistAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.adapter.ItemClickListener;
import com.android.msahakyan.fma.model.Artist;
import com.android.msahakyan.fma.util.Item;
import com.android.msahakyan.fma.view.FadeInNetworkImageView;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * @author msahakyan
 */

public class ArtistAdapterDelegate extends BaseAdapterDelegate {

    private ItemClickListener<Item> listener;

    public ArtistAdapterDelegate(Context ctx, ItemClickListener<Item> listener) {
        super(ctx, TYPE_ARTIST);
        this.listener = listener;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {
        return new ArtistViewHolder((ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.list_item_artist, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull List<Item> items, int position, @NonNull RecyclerView.ViewHolder holder) {
        Artist artist = (Artist) items.get(position);
        ArtistViewHolder viewHolder = (ArtistViewHolder) holder;

        viewHolder.mName.setText(artist.getName());

        viewHolder.mImageView.setErrorImageResId(R.drawable.img_placeholder);
        viewHolder.mImageView.setImageResource(R.drawable.img_placeholder);
        viewHolder.mImageView.setImageUrl(artist.getImage(), imageLoader);
        viewHolder.mImageView.setOnClickListener(v -> {
            if (listener != null) {
                listener.onItemClicked(artist, null);
            }
        });
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        return (items.get(position) instanceof Artist) && super.isForViewType(items, position);
    }

    static class ArtistViewHolder extends RecyclerView.ViewHolder {
        @Bind(R.id.artist_image)
        FadeInNetworkImageView mImageView;
        @Bind(R.id.artist_name)
        TextView mName;

        ArtistViewHolder(ViewGroup view) {
            super(view);
            ButterKnife.bind(this, view);
        }

    }
}
---------------------------------------------------------------------------------------------------------------------
BaseAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.IntDef;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.application.FmaApplication;
import com.android.msahakyan.fma.network.FmaApiService;
import com.android.msahakyan.fma.util.AppUtils;
import com.android.msahakyan.fma.util.Item;
import com.android.volley.toolbox.ImageLoader;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.List;

import javax.inject.Inject;

/**
 * Created by msahakyan on 31/07/16.
 */

public abstract class BaseAdapterDelegate implements AdapterDelegate<List<Item>> {

    private static final int DEFAULT_SPAN_SIZE = 2;

    static final int TYPE_GENRE = 0;
    static final int TYPE_CURATOR = 1;
    static final int TYPE_ALBUM = 2;
    static final int TYPE_ARTIST = 3;
    static final int TYPE_TRACK = 4;
    static final int TYPE_TRACK_WITH_ICON = 5;
    static final int TYPE_SEARCH_RESULT = 6;

    @Retention(RetentionPolicy.SOURCE)
    @IntDef({TYPE_GENRE,
        TYPE_CURATOR,
        TYPE_ALBUM,
        TYPE_ARTIST,
        TYPE_TRACK,
        TYPE_TRACK_WITH_ICON,
        TYPE_SEARCH_RESULT})
    @interface ElementViewType {
    }

    @Inject
    protected FmaApiService fmaApiService;
    @Inject
    protected ImageLoader imageLoader;

    private int mViewType;
    private Context context;

    BaseAdapterDelegate(Context context, @ElementViewType int viewType) {
        this.context = context;
        mViewType = viewType;
        FmaApplication.get(this.context).getApplicationComponent().inject(this);
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        return !AppUtils.isEmpty(items);
    }

    @Override
    @ElementViewType
    public int getItemViewType() {
        return mViewType;
    }

    @Override
    public int getSpanSize() {
        return DEFAULT_SPAN_SIZE;
    }

    protected Context getContext() {
        return context;
    }
}
--------------------------------------------------------------------------------------------------------
GenreAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.adapter.ItemClickListener;
import com.android.msahakyan.fma.model.Genre;
import com.android.msahakyan.fma.util.Item;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * @author msahakyan
 */

public class GenreAdapterDelegate extends BaseAdapterDelegate {

    private ItemClickListener<Item> listener;

    public GenreAdapterDelegate(Context ctx, ItemClickListener<Item> listener) {
        super(ctx, TYPE_GENRE);
        this.listener = listener;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {
        return new GenreViewHolder((ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.list_item_genre, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull List<Item> items, int position, @NonNull RecyclerView.ViewHolder holder) {
        Genre genre = (Genre) items.get(position);
        GenreViewHolder viewHolder = (GenreViewHolder) holder;
        viewHolder.mTitle.setText(genre.getTitle());
        viewHolder.mTitle.setOnClickListener(v -> {
            if (listener != null) {
                listener.onItemClicked(genre, null);
            }
        });
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        return items.get(position) instanceof Genre && super.isForViewType(items, position);
    }

    static class GenreViewHolder extends RecyclerView.ViewHolder {
        @Bind(R.id.genre_title)
        TextView mTitle;

        GenreViewHolder(ViewGroup view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }
}
----------------------------------------------------------------------------------------------------------------
SearchResultAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.adapter.ItemClickListener;
import com.android.msahakyan.fma.model.SearchResultItem;
import com.android.msahakyan.fma.network.NetworkRequestListener;
import com.android.msahakyan.fma.util.Item;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import timber.log.Timber;

/**
 * @author msahakyan
 */

public class SearchResultAdapterDelegate extends BaseAdapterDelegate {

    private ItemClickListener<Item> listener;

    public SearchResultAdapterDelegate(Context ctx, ItemClickListener<Item> listener) {
        super(ctx, TYPE_SEARCH_RESULT);
        this.listener = listener;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {
        return new SearchItemViewHolder((ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.list_item_search_result, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull List<Item> items, int position, @NonNull RecyclerView.ViewHolder holder) {
        SearchResultItem resultItem = (SearchResultItem) items.get(position);
        SearchItemViewHolder viewHolder = (SearchItemViewHolder) holder;
        viewHolder.title.setText(resultItem.getTrackTitle());
        viewHolder.artistName.setText(getContext().getString(R.string.artist_name_wrapper, resultItem.getArtistName()));
        viewHolder.itemView.setOnClickListener(v ->
            fmaApiService.getTrackById(new NetworkRequestListener<Item>() {
                @Override
                public void onSuccess(@Nullable Item item, int statusCode) {
                    if (listener != null) {
                        listener.onItemClicked(item, null);
                    }
                }

                @Override
                public void onError(int statusCode, String errorMessage) {
                    Timber.e("Can't load track by id: " + resultItem.getTrackId());
                }
            }, resultItem.getTrackId()));
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        return items.get(position) instanceof SearchResultItem && super.isForViewType(items, position);
    }

    static class SearchItemViewHolder extends RecyclerView.ViewHolder {

        @Bind(R.id.track_title)
        TextView title;
        @Bind(R.id.track_artist_name)
        TextView artistName;

        SearchItemViewHolder(ViewGroup view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------
TrackAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.adapter.ItemClickListener;
import com.android.msahakyan.fma.model.Track;
import com.android.msahakyan.fma.util.Item;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * @author msahakyan
 */

public class TrackAdapterDelegate extends BaseAdapterDelegate {

    private final ItemClickListener<Item> listener;

    public TrackAdapterDelegate(Context ctx, ItemClickListener<Item> listener) {
        super(ctx, TYPE_TRACK);
        this.listener = listener;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {
        return new TrackViewHolder((ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.list_item_track, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull List<Item> items, int position, @NonNull RecyclerView.ViewHolder holder) {
        final Track track = (Track) items.get(position);
        TrackViewHolder viewHolder = (TrackViewHolder) holder;

        viewHolder.trackNumber.setText(String.valueOf(position + 1));
        viewHolder.title.setText(track.getTitle());

        viewHolder.duration.setText(track.getDuration());
        viewHolder.itemView.setOnClickListener(v -> {
            if (listener != null) {
                listener.onItemClicked(track, viewHolder);
            }
        });
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        Item item = items.get(position);
        return item instanceof Track && ((Track) item).getQualifier() == null && super.isForViewType(items, position);
    }

    static class TrackViewHolder extends RecyclerView.ViewHolder {

        @Bind(R.id.track_number)
        TextView trackNumber;
        @Bind(R.id.track_title)
        TextView title;
        @Bind(R.id.track_duration)
        TextView duration;

        TrackViewHolder(ViewGroup view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }
}
------------------------------------------------------------------------------------------------------
TrackWithIconAdapterDelegate
package com.android.msahakyan.fma.adapter.delegates;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.adapter.ItemClickListener;
import com.android.msahakyan.fma.model.Track;
import com.android.msahakyan.fma.util.Item;
import com.android.volley.toolbox.NetworkImageView;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

import static com.android.msahakyan.fma.fragment.TracksFragment.QUALIFIER;

/**
 * @author msahakyan
 */

public class TrackWithIconAdapterDelegate extends BaseAdapterDelegate {

    private final ItemClickListener<Item> listener;

    public TrackWithIconAdapterDelegate(Context ctx, ItemClickListener<Item> listener) {
        super(ctx, TYPE_TRACK_WITH_ICON);
        this.listener = listener;
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent) {
        return new TrackWithIconViewHolder((ViewGroup) LayoutInflater.from(getContext()).inflate(R.layout.list_item_track_with_icon, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull List<Item> items, int position, @NonNull RecyclerView.ViewHolder holder) {
        final Track track = (Track) items.get(position);
        TrackWithIconViewHolder viewHolder = (TrackWithIconViewHolder) holder;

        viewHolder.trackImage.setImageResource(R.drawable.img_placeholder);
        viewHolder.trackImage.setImageUrl(track.getImage(), imageLoader);
        viewHolder.title.setText(track.getTitle());

        viewHolder.trackImage.setOnClickListener(v -> {
            if (listener != null) {
                listener.onItemClicked(track, viewHolder);
            }
        });
    }

    @Override
    public boolean isForViewType(@NonNull List<Item> items, int position) {
        Item item = items.get(position);
        return item instanceof Track && ((Track) item).getQualifier().equals(QUALIFIER) && super.isForViewType(items, position);
    }

    static class TrackWithIconViewHolder extends RecyclerView.ViewHolder {

        @Bind(R.id.track_image)
        NetworkImageView trackImage;
        @Bind(R.id.track_title)
        TextView title;

        TrackWithIconViewHolder(ViewGroup view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
CustomPagerAdapter
package com.android.msahakyan.fma.adapter.pagers;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;

/**
 * @author msahakyan
 */
abstract class CustomPagerAdapter extends FragmentPagerAdapter {

    private final int PAGE_SIZE = Integer.MAX_VALUE;

    CustomPagerAdapter(FragmentManager fm) {
        super(fm);
    }

    @Override
    public final int getCount() {
        return PAGE_SIZE;
    }

    @Override
    public final Fragment getItem(int position) {
        return getActualItem(getActualPosition(position));
    }

    @Override
    public long getItemId(int position) {
        return getActualPosition(position);
    }

    @Override
    public final CharSequence getPageTitle(int position) {
        return getActualPageTitle(getActualPosition(position));
    }

    public abstract int getItemCount();

    public abstract Fragment getActualItem(int position);

    public CharSequence getActualPageTitle(int position) {
        return null;
    }

    int getActualPosition(int position) {
        return position % getItemCount();
    }

    int getStartPosition(int position) {
        return PAGE_SIZE / 2 - PAGE_SIZE / position % getItemCount();
    }
}
----------------------------------------------------------------------------------------------------------------------------------------
WheelAdapter
package com.android.msahakyan.fma.adapter.pagers;

import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.ViewGroup;

import com.android.msahakyan.fma.fragment.AlbumsFragment;
import com.android.msahakyan.fma.fragment.ArtistsFragment;
import com.android.msahakyan.fma.fragment.GenresFragment;

import java.util.List;

import static com.android.msahakyan.fma.fragment.MainPagerFragment.*;

/**
 * @author msahakyan
 */

public class WheelAdapter extends CustomPagerAdapter {

    private int mSelectedIndex;
    private FragmentManager mFragmentManager;

    private boolean mShouldRecreateFragments;
    private List<String> mTabs;

    public WheelAdapter(@NonNull FragmentManager fragmentManager, @NonNull List<String> tabs, String selectedTitle) {
        super(fragmentManager);
        mFragmentManager = fragmentManager;
        mTabs = tabs;
        if (selectedTitle != null) {
            mSelectedIndex = Math.max(0, mTabs.indexOf(selectedTitle));
        } else {
            mSelectedIndex = mTabs.indexOf(mTabs.get(0));
        }
    }

    @Override
    public int getItemCount() {
        return mTabs.size();
    }

    @Override
    public int getItemPosition(Object object) {
        return POSITION_NONE;
    }

    @Override
    public CharSequence getActualPageTitle(int position) {
        return mTabs.get(position);
    }

    @Override
    public Fragment getActualItem(int position) {
        String title = mTabs.get(position);
        switch (title) {
            case PAGE_ALBUMS:
                return AlbumsFragment.newInstance();
            case PAGE_ARTISTS:
                return ArtistsFragment.newInstance();
            case PAGE_GENRES:
                return GenresFragment.newInstance();
        }
        return null;
    }

    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        FragmentTransaction fragmentTransaction = mFragmentManager.beginTransaction();
        fragmentTransaction.detach((Fragment) object);
        fragmentTransaction.commitAllowingStateLoss();
        mFragmentManager.executePendingTransactions();
    }


    @Override
    public long getItemId(int position) {
        if (mShouldRecreateFragments) {
            return position;
        }
        return mTabs.get(getActualPosition(position)).hashCode();
    }

    public int getFirstPosition() {
        return getStartPosition(2) + mSelectedIndex;
    }

    @Override
    public void finishUpdate(ViewGroup container) {
        super.finishUpdate(container);
        mShouldRecreateFragments = false;
    }
}
---------------------------------------------------------------------------------------------------------------------
BaseListAdapter
package com.android.msahakyan.fma.adapter;

import android.support.v7.widget.RecyclerView;
import android.view.ViewGroup;

import com.android.msahakyan.fma.adapter.delegates.AdapterDelegate;
import com.android.msahakyan.fma.adapter.delegates.AdapterDelegatesManager;
import com.android.msahakyan.fma.util.AppUtils;
import com.android.msahakyan.fma.util.Item;

import java.util.List;

/**
 * Created by msahakyan on 15/06/16.
 */

public abstract class BaseListAdapter<T extends Item> extends RecyclerView.Adapter {

    private AdapterDelegatesManager<List<T>> mDelegatesManager;
    private List<T> mItems;

    BaseListAdapter(List<T> items) {
        mItems = items;
        mDelegatesManager = new AdapterDelegatesManager<>();
    }

    protected void setAdapterDelegates(List<AdapterDelegate<List<T>>> delegates) {
        mDelegatesManager.clear();
        for (AdapterDelegate<List<T>> delegate : delegates) {
            mDelegatesManager.addDelegate(delegate);
        }
    }

    @Override
    public int getItemViewType(int position) {
        return mDelegatesManager.getItemViewType(mItems, position);
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        return mDelegatesManager.onCreateViewHolder(parent, viewType);
    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
        mDelegatesManager.onBindViewHolder(mItems, position, holder);
    }

    @Override
    public int getItemCount() {
        return mItems.size();
    }

    public void addAll(List<T> items) {
        if (items != null) {
            mItems.addAll(items);
            final int startIndex = Math.max(0, mItems.size() - items.size() - 1);
            notifyItemRangeChanged(startIndex, mItems.size());
        }
    }

    public void clear() {
        if (!AppUtils.isEmpty(mItems)) {
            mItems.clear();
            notifyDataSetChanged();
        }
    }

    public List<T> getItems() {
        return mItems;
    }
}
-----------------------------------------------------------------------------------------------------------
ItemClickListener
package com.android.msahakyan.fma.adapter;

import android.support.v7.widget.RecyclerView;

/**
 * @author msahakyan
 *         <p>
 *         Simple interface which is responsible for delegating adapter item
 *         click events to the corresponding fragments
 */

public interface ItemClickListener<T> {

    /**
     * Fires when adapter item is clicked
     *
     * @param item   The adapter item which was clicked
     * @param holder The viewHolder of the adapter item
     */
    void onItemClicked(T item, RecyclerView.ViewHolder holder);
}
-----------------------------------------------------------------------------------------------------------------------
ItemListAdapter
package com.android.msahakyan.fma.adapter;

import android.content.Context;

import com.android.msahakyan.fma.adapter.delegates.AlbumAdapterDelegate;
import com.android.msahakyan.fma.adapter.delegates.ArtistAdapterDelegate;
import com.android.msahakyan.fma.adapter.delegates.GenreAdapterDelegate;
import com.android.msahakyan.fma.adapter.delegates.SearchResultAdapterDelegate;
import com.android.msahakyan.fma.adapter.delegates.TrackAdapterDelegate;
import com.android.msahakyan.fma.adapter.delegates.TrackWithIconAdapterDelegate;
import com.android.msahakyan.fma.util.Item;

import java.util.Arrays;
import java.util.List;

/**
 * Created by msahakyan on 05/08/16.
 */

public class ItemListAdapter extends BaseListAdapter<Item> {

    public ItemListAdapter(Context context, List<Item> items, ItemClickListener<Item> clickListener) {
        super(items);

        setAdapterDelegates(Arrays.asList(
            new GenreAdapterDelegate(context, clickListener),
            new ArtistAdapterDelegate(context, clickListener),
            new AlbumAdapterDelegate(context, clickListener),
            new TrackAdapterDelegate(context, clickListener),
            new TrackWithIconAdapterDelegate(context, clickListener),
            new SearchResultAdapterDelegate(context, clickListener)
        ));
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
SearchHistoryAdapter
package com.android.msahakyan.fma.adapter;

import android.content.Context;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.msahakyan.fma.R;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

/**
 * Created by msahakyan on 05/10/16.
 */

public class SearchHistoryAdapter extends RecyclerView.Adapter<SearchHistoryAdapter.SearchItemViewHolder> {

    private SearchHistoryAdapter.SearchHistoryItemClickListener mItemClickListener;
    private SearchHistoryAdapter.SearchHistoryItemClickListener mRemoveBtnClickListener;

    private Context context;
    private List<String> searchItems;

    public SearchHistoryAdapter(Context context, List<String> searchItems) {
        this.context = context;
        this.searchItems = searchItems;
    }

    public void setOnItemClickListener(SearchHistoryAdapter.SearchHistoryItemClickListener listener) {
        mItemClickListener = listener;
    }

    public void setOnRemoveBtnClickListener(SearchHistoryAdapter.SearchHistoryItemClickListener listener) {
        mRemoveBtnClickListener = listener;
    }

    @Override
    public SearchItemViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(context).inflate(R.layout.list_item_search_history, parent, false);
        return new SearchItemViewHolder(view);
    }

    @Override
    public void onBindViewHolder(SearchItemViewHolder holder, int position) {
        final String searchItem = searchItems.get(position);

        holder.searchTerm.setText(searchItem);
        holder.itemView.setOnClickListener(v -> {
            if (mItemClickListener != null) {
                mItemClickListener.onItemClick(searchItem);
            }
        });

        holder.removeItem.setOnClickListener(v -> {
                searchItems.remove(position);
                notifyDataSetChanged();
                if (mRemoveBtnClickListener != null) {
                    mRemoveBtnClickListener.onItemClick(searchItem);
                }
            }
        );
    }

    @Override
    public int getItemCount() {
        return searchItems.size();
    }

    static class SearchItemViewHolder extends RecyclerView.ViewHolder {

        @Bind(R.id.search_term)
        TextView searchTerm;
        @Bind(R.id.action_remove_history_item)
        ImageView removeItem;

        SearchItemViewHolder(View view) {
            super(view);
            ButterKnife.bind(this, view);
        }
    }

    public interface SearchHistoryItemClickListener {
        void onItemClick(String searchHistoryItem);
    }
}
---------------------------------------------------------------------------------------------------------------------------------
FmaApplication
package com.android.msahakyan.fma.application;

import android.app.Application;
import android.content.Context;

import com.android.msahakyan.fma.BuildConfig;
import com.android.msahakyan.fma.di.component.ApplicationComponent;
import com.android.msahakyan.fma.di.component.DaggerApplicationComponent;
import com.android.msahakyan.fma.di.module.ApiModule;
import com.android.msahakyan.fma.di.module.ApplicationModule;
import com.android.msahakyan.fma.di.module.ImageLoaderModule;
import com.android.msahakyan.fma.di.module.StorageModule;

import io.branch.referral.Branch;
import timber.log.Timber;

/**
 * Created by msahakyan on 01/07/16.
 */

public class FmaApplication extends Application {

    private ApplicationComponent applicationComponent;

    @Override
    public void onCreate() {
        super.onCreate();

        // Initialize Timber new plant
        if (BuildConfig.DEBUG) {
            Timber.plant(new Timber.DebugTree());
        }

        // Initialize the Branch object
        Branch.getAutoInstance(this);


        applicationComponent = DaggerApplicationComponent.builder()
            .applicationModule(new ApplicationModule(this))
            .apiModule(new ApiModule())
            .imageLoaderModule(new ImageLoaderModule())
            .storageModule(new StorageModule())
            .build();
    }

    public ApplicationComponent getApplicationComponent() {
        return applicationComponent;
    }

    public static FmaApplication get(Context context) {
        return (FmaApplication) context.getApplicationContext();
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
