Album
package com.android.msahakyan.fma.model;

import android.os.Parcel;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.util.Item;
import com.google.gson.annotations.SerializedName;

/**
 * Created by msahakyan on 12/07/16.
 */

public class Album implements Item {

    @SerializedName("album_id")
    private long id;

    @SerializedName("album_title")
    private String title;

    @SerializedName("album_url")
    private String url;

    @SerializedName("album_type")
    private String type;

    @SerializedName("artist_name")
    private String artistName;

    @SerializedName("artist_url")
    private String artistUrl;

    @SerializedName("album_producer")
    private String producer;

    @SerializedName("album_information")
    private String information;

    @SerializedName("album_date_released")
    private String releaseDate;

    @SerializedName("album_comments")
    private int commentsCount;

    @SerializedName("album_favorites")
    private int favouritesCount;

    @SerializedName("album_tracks")
    private int tracksCount;

    @SerializedName("album_listens")
    private int listensCount;

    @SerializedName("album_date_created")
    private String creationDate;

    @SerializedName("album_image_file")
    private String imageFile;

    public Album() {
    }

    protected Album(Parcel in) {
        id = in.readLong();
        title = in.readString();
        url = in.readString();
        type = in.readString();
        artistName = in.readString();
        artistUrl = in.readString();
        producer = in.readString();
        information = in.readString();
        releaseDate = in.readString();
        commentsCount = in.readInt();
        favouritesCount = in.readInt();
        tracksCount = in.readInt();
        listensCount = in.readInt();
        creationDate = in.readString();
        imageFile = in.readString();
    }

    public static final Creator<Album> CREATOR = new Creator<Album>() {
        @Override
        public Album createFromParcel(Parcel in) {
            return new Album(in);
        }

        @Override
        public Album[] newArray(int size) {
            return new Album[size];
        }
    };

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getArtistName() {
        return artistName;
    }

    public void setArtistName(String artistName) {
        this.artistName = artistName;
    }

    public String getArtistUrl() {
        return artistUrl;
    }

    public void setArtistUrl(String artistUrl) {
        this.artistUrl = artistUrl;
    }

    public String getProducer() {
        return producer;
    }

    public void setProducer(String producer) {
        this.producer = producer;
    }

    public String getInformation() {
        return information;
    }

    public void setInformation(String information) {
        this.information = information;
    }

    public String getReleaseDate() {
        return releaseDate;
    }

    public void setReleaseDate(String releaseDate) {
        this.releaseDate = releaseDate;
    }

    public int getCommentsCount() {
        return commentsCount;
    }

    public void setCommentsCount(int commentsCount) {
        this.commentsCount = commentsCount;
    }

    public int getFavouritesCount() {
        return favouritesCount;
    }

    public void setFavouritesCount(int favouritesCount) {
        this.favouritesCount = favouritesCount;
    }

    public int getTracksCount() {
        return tracksCount;
    }

    public void setTracksCount(int tracksCount) {
        this.tracksCount = tracksCount;
    }

    public int getListensCount() {
        return listensCount;
    }

    public void setListensCount(int listensCount) {
        this.listensCount = listensCount;
    }

    public String getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(String creationDate) {
        this.creationDate = creationDate;
    }

    public String getImageFile() {
        return imageFile;
    }

    public void setImageFile(String imageFile) {
        this.imageFile = imageFile;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(title);
        dest.writeString(url);
        dest.writeString(type);
        dest.writeString(artistName);
        dest.writeString(artistUrl);
        dest.writeString(producer);
        dest.writeString(information);
        dest.writeString(releaseDate);
        dest.writeInt(commentsCount);
        dest.writeInt(favouritesCount);
        dest.writeInt(tracksCount);
        dest.writeInt(listensCount);
        dest.writeString(creationDate);
        dest.writeString(imageFile);
    }

    @Override
    public int compareTo(@NonNull Object another) {
        if (!(another instanceof Album)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        Album other = (Album) another;
        return this.title.compareToIgnoreCase(other.title);
    }

    private String qualifier;

    @Override
    public void setQualifier(String qualifier) {
        this.qualifier = qualifier;
    }

    public String getQualifier() {
        return this.qualifier;
    }
}
-----------------------------------------------------------------------------------------------------------------------
Artist
package com.android.msahakyan.fma.model;

import android.os.Parcel;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.util.Item;
import com.google.gson.annotations.SerializedName;

/**
 * Created by msahakyan on 13/07/16.
 */

public class Artist implements Item {

    @SerializedName("artist_id")
    private long id;

    @SerializedName("artist_url")
    private String url;

    @SerializedName("artist_name")
    private String name;

    @SerializedName("artist_bio")
    private String bio;

    @SerializedName("artist_website")
    private String website;

    @SerializedName("artist_contact")
    private String contact;

    @SerializedName("artist_comments")
    private int commentsCount;

    @SerializedName("artist_favorites")
    private int favouritesCount;

    @SerializedName("artist_date_created")
    private String creationDate;

    @SerializedName("artist_image_file")
    private String image;

    @SerializedName("artist_location")
    private String location;

    public Artist() {
    }

    protected Artist(Parcel in) {
        id = in.readLong();
        url = in.readString();
        name = in.readString();
        bio = in.readString();
        website = in.readString();
        contact = in.readString();
        commentsCount = in.readInt();
        favouritesCount = in.readInt();
        creationDate = in.readString();
        image = in.readString();
        location = in.readString();
    }

    public static final Creator<Artist> CREATOR = new Creator<Artist>() {
        @Override
        public Artist createFromParcel(Parcel in) {
            return new Artist(in);
        }

        @Override
        public Artist[] newArray(int size) {
            return new Artist[size];
        }
    };

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBio() {
        return bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }

    public String getWebsite() {
        return website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    public String getContact() {
        return contact;
    }

    public void setContact(String contact) {
        this.contact = contact;
    }

    public int getCommentsCount() {
        return commentsCount;
    }

    public void setCommentsCount(int commentsCount) {
        this.commentsCount = commentsCount;
    }

    public int getFavouritesCount() {
        return favouritesCount;
    }

    public void setFavouritesCount(int favouritesCount) {
        this.favouritesCount = favouritesCount;
    }

    public String getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(String creationDate) {
        this.creationDate = creationDate;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(url);
        dest.writeString(name);
        dest.writeString(bio);
        dest.writeString(website);
        dest.writeString(contact);
        dest.writeInt(commentsCount);
        dest.writeInt(favouritesCount);
        dest.writeString(creationDate);
        dest.writeString(image);
        dest.writeString(location);
    }

    @Override
    public int compareTo(@NonNull Object another) {
        if (!(another instanceof Artist)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        Artist other = (Artist) another;
        return this.name.compareToIgnoreCase(other.name);
    }

    private String qualifier;

    @Override
    public void setQualifier(String qualifier) {
        this.qualifier = qualifier;
    }

    public String getQualifier() {
        return this.qualifier;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
Curator
package com.android.msahakyan.fma.model;

import android.os.Parcel;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.util.Item;
import com.google.gson.annotations.SerializedName;

/**
 * Created by msahakyan on 13/07/16.
 */

public class Curator implements Item {

    @SerializedName("curator_id")
    private long id;

    @SerializedName("curator_handle")
    private String handle;

    @SerializedName("curator_url")
    private String url;

    @SerializedName("curator_image_file")
    private String image;

    @SerializedName("curator_title")
    private String title;

    @SerializedName("curator_bio")
    private String bio;

    @SerializedName("curator_date_created")
    private String creationDate;

    @SerializedName("curator_favorites")
    private int favouritesCount;

    @SerializedName("curator_comments")
    private int commentsCount;

    @SerializedName("curator_playlists")
    private int playlistsCount;

    public Curator() {
    }

    protected Curator(Parcel in) {
        id = in.readLong();
        handle = in.readString();
        url = in.readString();
        image = in.readString();
        title = in.readString();
        bio = in.readString();
        creationDate = in.readString();
        favouritesCount = in.readInt();
        commentsCount = in.readInt();
        playlistsCount = in.readInt();
    }

    public static final Creator<Curator> CREATOR = new Creator<Curator>() {
        @Override
        public Curator createFromParcel(Parcel in) {
            return new Curator(in);
        }

        @Override
        public Curator[] newArray(int size) {
            return new Curator[size];
        }
    };

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getHandle() {
        return handle;
    }

    public void setHandle(String handle) {
        this.handle = handle;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getBio() {
        return bio;
    }

    public void setBio(String bio) {
        this.bio = bio;
    }

    public String getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(String creationDate) {
        this.creationDate = creationDate;
    }

    public int getFavouritesCount() {
        return favouritesCount;
    }

    public void setFavouritesCount(int favouritesCount) {
        this.favouritesCount = favouritesCount;
    }

    public int getCommentsCount() {
        return commentsCount;
    }

    public void setCommentsCount(int commentsCount) {
        this.commentsCount = commentsCount;
    }

    public int getPlaylistsCount() {
        return playlistsCount;
    }

    public void setPlaylistsCount(int playlistsCount) {
        this.playlistsCount = playlistsCount;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(handle);
        dest.writeString(url);
        dest.writeString(image);
        dest.writeString(title);
        dest.writeString(bio);
        dest.writeString(creationDate);
        dest.writeInt(favouritesCount);
        dest.writeInt(commentsCount);
        dest.writeInt(playlistsCount);
    }

    @Override
    public int compareTo(@NonNull Object another) {
        if (!(another instanceof Curator)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        Curator other = (Curator) another;
        return this.title.compareToIgnoreCase(other.title);
    }

    private String qualifier;

    @Override
    public void setQualifier(String qualifier) {
        this.qualifier = qualifier;
    }

    public String getQualifier() {
        return this.qualifier;
    }
}
--------------------------------------------------------------------------------------------------------------
Genre
package com.android.msahakyan.fma.model;

import android.os.Parcel;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.util.Item;
import com.google.gson.annotations.SerializedName;

/**
 * Created by msahakyan on 12/07/16.
 */

public class Genre implements Item {

    @SerializedName("genre_id")
    private long id;

    @SerializedName("genre_title")
    private String title;

    @SerializedName("genre_url")
    private String url;

    @SerializedName("genre_color")
    private String color;

    public Genre() {
    }

    protected Genre(Parcel in) {
        id = in.readLong();
        title = in.readString();
        url = in.readString();
        color = in.readString();
    }

    public static final Creator<Genre> CREATOR = new Creator<Genre>() {
        @Override
        public Genre createFromParcel(Parcel in) {
            return new Genre(in);
        }

        @Override
        public Genre[] newArray(int size) {
            return new Genre[size];
        }
    };

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(title);
        dest.writeString(url);
        dest.writeString(color);
    }

    @Override
    public int compareTo(@NonNull Object another) {
        if (!(another instanceof Genre)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        Genre other = (Genre) another;
        return this.title.compareToIgnoreCase(other.title);
    }

    private String qualifier;

    @Override
    public void setQualifier(String qualifier) {
        this.qualifier = qualifier;
    }

    public String getQualifier() {
        return this.qualifier;
    }
}
------------------------------------------------------------------------------------------------------------------------
Page
package com.android.msahakyan.fma.model;

import com.android.msahakyan.fma.util.Item;
import com.google.gson.annotations.SerializedName;

import java.util.List;

/**
 * Created by msahakyan on 25/07/16.
 */

public class Page<T extends Item> {

    @SerializedName("title")
    private String title;

    @SerializedName("message")
    private String message;

    @SerializedName("errors")
    private List<String> errors;

    @SerializedName("total")
    private long total;

    @SerializedName("total_pages")
    private long totalPages;

    @SerializedName("page")
    private long page;

    @SerializedName("limit")
    private int limit;

    @SerializedName("dataset")
    private List<T> items;

    public Page() {
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public List<String> getErrors() {
        return errors;
    }

    public void setErrors(List<String> errors) {
        this.errors = errors;
    }

    public long getTotal() {
        return total;
    }

    public void setTotal(long total) {
        this.total = total;
    }

    public long getTotalPages() {
        return totalPages;
    }

    public void setTotalPages(long totalPages) {
        this.totalPages = totalPages;
    }

    public long getPage() {
        return page;
    }

    public void setPage(long page) {
        this.page = page;
    }

    public int getLimit() {
        return limit;
    }

    public void setLimit(int limit) {
        this.limit = limit;
    }

    public List<T> getItems() {
        return items;
    }

    public void setItems(List<T> items) {
        this.items = items;
    }
}

------------------------------------------------------------------------------------------------------------------------
SearchItem
package com.android.msahakyan.fma.model;

import android.os.Parcel;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.util.Item;

/**
 * Created by msahakyan on 05/10/16.
 */

public class SearchItem implements Item {

    private String term;

    protected SearchItem(Parcel in) {
        term = in.readString();
    }

    public static final Creator<SearchItem> CREATOR = new Creator<SearchItem>() {
        @Override
        public SearchItem createFromParcel(Parcel in) {
            return new SearchItem(in);
        }

        @Override
        public SearchItem[] newArray(int size) {
            return new SearchItem[size];
        }
    };

    public String getTerm() {
        return term;
    }

    public void setTerm(String term) {
        this.term = term;
    }

    @Override
    public void setQualifier(String qualifier) {

    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(term);
    }

    @Override
    public int compareTo(@NonNull Object another) {
        if (!(another instanceof SearchItem)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        SearchItem other = (SearchItem) another;
        return this.term.compareToIgnoreCase(other.term);
    }
}
----------------------------------------------------------------------------------------------------------------
SearchResultItem
package com.android.msahakyan.fma.model;

import android.os.Parcel;

import com.android.msahakyan.fma.util.Item;

/**
 * Created by msahakyan on 05/10/16.
 */

public class SearchResultItem implements Item {

    private long trackId;
    private String trackTitle;
    private String artistName;

    public SearchResultItem() {
    }

    protected SearchResultItem(Parcel in) {
        trackId = in.readLong();
        trackTitle = in.readString();
        artistName = in.readString();
    }

    public static final Creator<SearchResultItem> CREATOR = new Creator<SearchResultItem>() {
        @Override
        public SearchResultItem createFromParcel(Parcel in) {
            return new SearchResultItem(in);
        }

        @Override
        public SearchResultItem[] newArray(int size) {
            return new SearchResultItem[size];
        }
    };

    public long getTrackId() {
        return trackId;
    }

    public void setTrackId(long trackId) {
        this.trackId = trackId;
    }

    public String getTrackTitle() {
        return trackTitle;
    }

    public void setTrackTitle(String trackTitle) {
        this.trackTitle = trackTitle;
    }

    public String getArtistName() {
        return artistName;
    }

    public void setArtistName(String artistName) {
        this.artistName = artistName;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(trackId);
        dest.writeString(trackTitle);
        dest.writeString(artistName);
    }

    @Override
    public void setQualifier(String qualifier) {
        // do nothing
    }

    @Override
    public int compareTo(Object another) {
        if (!(another instanceof SearchResultItem)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        SearchResultItem other = (SearchResultItem) another;
        return this.trackTitle.compareToIgnoreCase(other.trackTitle);
    }
}
-----------------------------------------------------------------------------------------------------------------
Track

package com.android.msahakyan.fma.model;

import android.graphics.Bitmap;
import android.os.Parcel;
import android.support.annotation.NonNull;

import com.android.msahakyan.fma.util.Item;
import com.google.gson.annotations.SerializedName;

import java.util.List;

/**
 * Created by msahakyan on 03/07/16.
 */

public class Track implements Item {

    @SerializedName("track_id")
    private long id;

    @SerializedName("track_title")
    private String title;

    @SerializedName("track_url")
    private String url;

    @SerializedName("track_image_file")
    private String image;

    @SerializedName("artist_id")
    private long artistId;

    @SerializedName("artist_name")
    private String artistName;

    @SerializedName("artist_url")
    private String artistUrl;

    @SerializedName("artist_website")
    private String artistWebsite;

    @SerializedName("album_id")
    private long albumId;

    @SerializedName("album_title")
    private String albumTitle;

    @SerializedName("album_url")
    private String albumUrl;

    @SerializedName("track_duration")
    private String duration;

    @SerializedName("track_file_url")
    private String fileUrl;

    @SerializedName("track_listen_url")
    private String listenUrl;

    @SerializedName("track_genres")
    private List<Genre> genres;

    @SerializedName("track_file")
    private String file;

    @SerializedName("track_date_created")
    private String creationDate;

    @SerializedName("track_comments")
    private int commentsCount;

    @SerializedName("track_favorites")
    private int favouritesCount;

    @SerializedName("track_listens")
    private int listensCount;

    @SerializedName("track_downloads")
    private int downloadsCount;

    @SerializedName("license_url")
    private String licenseUrl;

    private Bitmap imageBitmap;

    private String qualifier;

    public Track() {
    }

    protected Track(Parcel in) {
        id = in.readLong();
        title = in.readString();
        url = in.readString();
        image = in.readString();
        artistId = in.readLong();
        artistName = in.readString();
        artistUrl = in.readString();
        artistWebsite = in.readString();
        albumId = in.readLong();
        albumTitle = in.readString();
        albumUrl = in.readString();
        duration = in.readString();
        fileUrl = in.readString();
        listenUrl = in.readString();
        genres = in.createTypedArrayList(Genre.CREATOR);
        file = in.readString();
        creationDate = in.readString();
        licenseUrl = in.readString();
        commentsCount = in.readInt();
        favouritesCount = in.readInt();
        listensCount = in.readInt();
        downloadsCount = in.readInt();
        imageBitmap = in.readParcelable(Bitmap.class.getClassLoader());
    }

    public static final Creator<Track> CREATOR = new Creator<Track>() {
        @Override
        public Track createFromParcel(Parcel in) {
            return new Track(in);
        }

        @Override
        public Track[] newArray(int size) {
            return new Track[size];
        }
    };

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public long getArtistId() {
        return artistId;
    }

    public void setArtistId(long artistId) {
        this.artistId = artistId;
    }

    public String getArtistName() {
        return artistName;
    }

    public void setArtistName(String artistName) {
        this.artistName = artistName;
    }

    public String getArtistUrl() {
        return artistUrl;
    }

    public void setArtistUrl(String artistUrl) {
        this.artistUrl = artistUrl;
    }

    public String getArtistWebsite() {
        return artistWebsite;
    }

    public void setArtistWebsite(String artistWebsite) {
        this.artistWebsite = artistWebsite;
    }

    public long getAlbumId() {
        return albumId;
    }

    public void setAlbumId(long albumId) {
        this.albumId = albumId;
    }

    public String getAlbumTitle() {
        return albumTitle;
    }

    public void setAlbumTitle(String albumTitle) {
        this.albumTitle = albumTitle;
    }

    public String getAlbumUrl() {
        return albumUrl;
    }

    public void setAlbumUrl(String albumUrl) {
        this.albumUrl = albumUrl;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String getFileUrl() {
        return fileUrl;
    }

    public void setFileUrl(String fileUrl) {
        this.fileUrl = fileUrl;
    }

    public String getListenUrl() {
        return listenUrl;
    }

    public void setListenUrl(String listenUrl) {
        this.listenUrl = listenUrl;
    }

    public List<Genre> getGenres() {
        return genres;
    }

    public void setGenres(List<Genre> genres) {
        this.genres = genres;
    }

    public String getFile() {
        return file;
    }

    public void setFile(String file) {
        this.file = file;
    }

    public String getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(String creationDate) {
        this.creationDate = creationDate;
    }

    public int getCommentsCount() {
        return commentsCount;
    }

    public void setCommentsCount(int commentsCount) {
        this.commentsCount = commentsCount;
    }

    public int getFavouritesCount() {
        return favouritesCount;
    }

    public void setFavouritesCount(int favouritesCount) {
        this.favouritesCount = favouritesCount;
    }

    public int getListensCount() {
        return listensCount;
    }

    public void setListensCount(int listensCount) {
        this.listensCount = listensCount;
    }

    public int getDownloadsCount() {
        return downloadsCount;
    }

    public void setDownloadsCount(int downloadsCount) {
        this.downloadsCount = downloadsCount;
    }

    public Bitmap getImageBitmap() {
        return imageBitmap;
    }

    public void setImageBitmap(Bitmap imageBitmap) {
        this.imageBitmap = imageBitmap;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(title);
        dest.writeString(url);
        dest.writeString(image);
        dest.writeLong(artistId);
        dest.writeString(artistName);
        dest.writeString(artistUrl);
        dest.writeString(artistWebsite);
        dest.writeLong(albumId);
        dest.writeString(albumTitle);
        dest.writeString(albumUrl);
        dest.writeString(duration);
        dest.writeString(fileUrl);
        dest.writeString(listenUrl);
        dest.writeString(licenseUrl);
        dest.writeTypedList(genres);
        dest.writeString(file);
        dest.writeString(creationDate);
        dest.writeInt(commentsCount);
        dest.writeInt(favouritesCount);
        dest.writeInt(listensCount);
        dest.writeInt(downloadsCount);
        dest.writeParcelable(imageBitmap, flags);
    }

    @Override
    public int compareTo(@NonNull Object another) {
        if (!(another instanceof Track)) {
            throw new IllegalArgumentException("Object: " + this.getClass().getSimpleName() + " can't compare to: " + another.getClass().getSimpleName());
        }
        Track other = (Track) another;
        return this.title.compareToIgnoreCase(other.title);
    }

    @Override
    public void setQualifier(String qualifier) {
        this.qualifier = qualifier;
    }

    public String getQualifier() {
        return this.qualifier;
    }

    public String getLicenseUrl() {
        return licenseUrl;
    }

    public void setLicenseUrl(String licenseUrl) {
        this.licenseUrl = licenseUrl;
    }
}
------------------------------------------------------------------------------------------------------------
PageParser
package com.android.msahakyan.fma.network.parser;

import com.android.msahakyan.fma.model.Page;
import com.android.msahakyan.fma.network.INetworkUtils;
import com.android.msahakyan.fma.util.Item;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by msahakyan on 25/07/16.
 */

public class PageParser<T extends Item> implements INetworkUtils.NetworkResponseParser<Page<T>> {

    private static final String ATTR_TITLE = "title";
    private static final String ATTR_MESSAGE = "message";
    private static final String ATTR_ERRORS = "errors";
    private static final String ATTR_TOTAL = "total";
    private static final String ATTR_TOTAL_PAGES = "total_pages";
    private static final String ATTR_PAGE = "page";
    private static final String ATTR_LIMIT = "limit";
    private static final String ATTR_DATASET = "dataset";

    private final Gson mGson = new Gson();

    private final Type mPageType;

    public PageParser(Type pageType) {
        mPageType = pageType;
    }

    @Override
    public Page<T> parseNetworkResponse(JsonElement networkResponse) {
        JsonObject responseObject = networkResponse.getAsJsonObject();
        Page<T> page = new Page<>();

        if (responseObject.has(ATTR_TITLE)) {
            page.setTitle(responseObject.get(ATTR_TITLE).getAsString());
        }

        if (responseObject.has(ATTR_MESSAGE)) {
            page.setMessage(responseObject.get(ATTR_MESSAGE).getAsString());
        }

        if (responseObject.has(ATTR_ERRORS)) {
            JsonArray errorsArray = responseObject.get(ATTR_ERRORS).getAsJsonArray();
            List<String> errors = new ArrayList<>(errorsArray.size());
            page.setErrors(errors);
        }

        if (responseObject.has(ATTR_TOTAL)) {
            page.setTotal(responseObject.get(ATTR_TOTAL).getAsLong());
        }

        if (responseObject.has(ATTR_TOTAL_PAGES)) {
            page.setTotalPages(responseObject.get(ATTR_TOTAL_PAGES).getAsLong());
        }

        if (responseObject.has(ATTR_PAGE)) {
            page.setPage(responseObject.get(ATTR_PAGE).getAsLong());
        }

        if (responseObject.has(ATTR_LIMIT)) {
            page.setLimit(responseObject.get(ATTR_LIMIT).getAsInt());
        }

        JsonArray itemsArray = responseObject.get(ATTR_DATASET).getAsJsonArray();
        List<T> items = new ArrayList<>(itemsArray.size());

        for (JsonElement jsonItem : itemsArray) {
            JsonObject jsonObject = jsonItem.getAsJsonObject();

            T item = mGson.fromJson(jsonObject, mPageType);
            items.add(item);
        }
        page.setItems(items);

        return page;
    }
}
-------------------------------------------------------------------------------------------------------------------------
SearchPagePArser
package com.android.msahakyan.fma.network.parser;

import com.android.msahakyan.fma.model.SearchResultItem;
import com.android.msahakyan.fma.network.INetworkUtils;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by msahakyan on 05/10/16.
 */
public class SearchPageParser implements INetworkUtils.NetworkResponseParser<List<SearchResultItem>> {

    private static final String ATTR_A_ROWS = "aRows";
    private final Gson mGson = new Gson();

    @Override
    public List<SearchResultItem> parseNetworkResponse(JsonElement networkResponse) {
        JsonObject responseObject = networkResponse.getAsJsonObject();

        List<String> results = null;

        if (responseObject.has(ATTR_A_ROWS)) {
            JsonArray jsonArray = responseObject.getAsJsonArray(ATTR_A_ROWS);
            Type listType = new TypeToken<List<String>>() {
            }.getType();
            results = mGson.fromJson(jsonArray.toString(), listType);
        }

        List<SearchResultItem> searchResults = null;
        if (results != null) {
            searchResults = new ArrayList<>(results.size());

            for (String row : results) {
                SearchResultItem item = new SearchResultItem();
                item.setTrackId(fetchTrackId(row));
                item.setTrackTitle(fetchTrackTitle(row));
                item.setArtistName(fetchArtistName(row));

                searchResults.add(item);
            }
        }

        return searchResults;
    }

    private long fetchTrackId(String row) {
        if (row == null) {
            return 0;
        }
        return Long.parseLong(row.substring(row.lastIndexOf('(') + 1, row.lastIndexOf(')')));
    }

    private String fetchTrackTitle(String row) {
        if (row == null) {
            return null;
        }
        return row.substring(row.indexOf(']') + 2, row.lastIndexOf('(') - 1);
    }

    private String fetchArtistName(String row) {
        if (row == null) {
            return null;
        }
        return row.substring(row.indexOf('[') + 1, row.indexOf(']'));
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------
TrackDetailParser
package com.android.msahakyan.fma.network.parser;

import com.android.msahakyan.fma.network.INetworkUtils;
import com.android.msahakyan.fma.util.Item;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import java.lang.reflect.Type;

/**
 * Created by msahakyan on 25/07/16.
 */

public class TrackDetailParser<T extends Item> implements INetworkUtils.NetworkResponseParser<T> {

    private final Gson mGson = new Gson();

    private final Type mPageType;

    public TrackDetailParser(Type pageType) {
        mPageType = pageType;
    }

    @Override
    public T parseNetworkResponse(JsonElement networkResponse) {
        JsonObject responseObject = networkResponse.getAsJsonObject();
        T item = mGson.fromJson(responseObject, mPageType);
        return item;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------
ApiService
package com.android.msahakyan.fma.network;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.android.msahakyan.fma.util.AppUtils;
import com.android.volley.Request;
import com.android.volley.RequestQueue;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import timber.log.Timber;

import static com.android.msahakyan.fma.network.Endpoint.BASE_URL;

/**
 * Created by msahakyan on 01/07/16.
 */

public class ApiService implements INetworkUtils {

    private static final int REQUEST_TIMEOUT = 5000; // 5 sec.
    private static final int MAX_RETRIES = 3;
    private static final int BACKOFF_MULTIPLIER = 1;

    private final RequestQueue requestQueue;

    public ApiService(RequestQueue requestQueue) {
        this.requestQueue = requestQueue;
    }

    @Nullable
    @Override
    public <T> CancelableRequest<T> request(int method, @Nullable String endpoint, @NonNull NetworkRequestListener<T> networkRequestListener, @Nullable NetworkResponseParser<T> parser, @Nullable Map<String, String> params, Request.Priority priority, boolean appendBaseUrl) {
        String url = appendBaseUrl ? getUrl(method, BASE_URL, endpoint, params) :
            getUrl(method, endpoint, params);

        Map<String, String> headers = getDefaultHeaders();

        GsonRequest<T> request = new GsonRequest<>(method, url, networkRequestListener, parser);
        request.setTag(url);
        request.setParams(params);
        request.setHeaders(headers);
        request.setRetryPolicy(new CustomRetryPolicy(REQUEST_TIMEOUT, MAX_RETRIES, BACKOFF_MULTIPLIER));
        request.setPriority(priority == null ? Request.Priority.NORMAL : priority);
        requestQueue.add(request);

        Timber.d("HTTP Request: " + method + "\nURL: " + url);

        return new CancelableRequest<>(request);
    }

    @Override
    public <T> CancelableRequest<T> requestGet(@Nullable String endpoint, @NonNull NetworkRequestListener<T> requestListener, @NonNull NetworkResponseParser<T> parser, @Nullable Map<String, String> params, Request.Priority priority) {
        return request(Request.Method.GET, endpoint, requestListener, parser, params, priority, true);
    }

    public <T> CancelableRequest<T> requestGetToFixedEndpoint(@Nullable String endpoint, @NonNull NetworkRequestListener<T> requestListener, @NonNull NetworkResponseParser<T> parser, @Nullable Map<String, String> params, Request.Priority priority) {
        return request(Request.Method.GET, endpoint, requestListener, parser, params, priority, false);
    }

    private static String getUrl(int method, String baseUrl, String endpoint, Map<String, String> params) {
        if (params != null) {
            // Prevent null values
            for (Map.Entry<String, String> entry : params.entrySet()) {
                if (entry.getValue() == null) {
                    entry.setValue("");
                }
            }
        }

        if (method == Request.Method.GET && !AppUtils.isEmpty(params)) {
            final StringBuilder result = new StringBuilder(baseUrl + endpoint);
            for (String key : params.keySet()) {
                try {
                    final String encodedKey = URLEncoder.encode(key, "UTF-8");
                    final String encodedValue = URLEncoder.encode(params.get(key), "UTF-8");
                    if (result.toString().contains("?")) {
                        result.append("&");
                    } else {
                        result.append("?");
                    }
                    result.append(encodedKey);
                    result.append("=");
                    result.append(encodedValue);
                } catch (Exception e) {
                    Timber.w(e, "Something went wrong!");
                }
            }
            return result.toString();
        } else {
            return baseUrl + endpoint;
        }
    }

    private static String getUrl(int method, String endpoint, Map<String, String> params) {
        if (params != null) {
            // Prevent null values
            for (Map.Entry<String, String> entry : params.entrySet()) {
                if (entry.getValue() == null) {
                    entry.setValue("");
                }
            }
        }

        if (method == Request.Method.GET && !AppUtils.isEmpty(params)) {
            final StringBuilder result = new StringBuilder(endpoint);
            for (String key : params.keySet()) {
                try {
                    final String encodedKey = URLEncoder.encode(key, "UTF-8");
                    final String encodedValue = URLEncoder.encode(params.get(key), "UTF-8");
                    if (result.toString().contains("?")) {
                        result.append("&");
                    } else {
                        result.append("?");
                    }
                    result.append(encodedKey);
                    result.append("=");
                    result.append(encodedValue);
                } catch (Exception e) {
                    Timber.w(e, "Something went wrong!");
                }
            }
            return result.toString();
        } else {
            return endpoint;
        }
    }

    private Map<String, String> getDefaultHeaders() {
        HashMap<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");

        return headers;
    }
}
------------------------------------------------------------------------------------------------------------
CancleableRequest
package com.android.msahakyan.fma.network;

import com.android.volley.Request;

/**
 * Created by msahakyan on 24/07/16.
 */

public class CancelableRequest<T> {
    private final Request<GsonRequest.ProtocolObject<T>> mRequest;

    CancelableRequest(Request<GsonRequest.ProtocolObject<T>> request) {
        mRequest = request;
    }

    public void cancel() {
        mRequest.cancel();
    }

    public boolean isOngoing() {
        return !mRequest.hasHadResponseDelivered();
    }

    @Override
    public String toString() {
        return mRequest.toString();
    }
}
-----------------------------------------------------------------------------------------------------------------------
CustomRetryPolicy
package com.android.msahakyan.fma.network;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.VolleyError;

import java.net.HttpURLConnection;

/**
 * Created by msahakyan on 26/07/16.
 */

public class CustomRetryPolicy extends DefaultRetryPolicy {

    public CustomRetryPolicy(int initialTimeoutMs, int maxNumRetries, float backoffMultiplier) {
        super(initialTimeoutMs, maxNumRetries, backoffMultiplier);
    }

    @Override
    public void retry(VolleyError error) throws VolleyError {

        if (error.networkResponse != null &&
            (error.networkResponse.statusCode < HttpURLConnection.HTTP_INTERNAL_ERROR &&
                error.networkResponse.statusCode != HttpURLConnection.HTTP_NOT_FOUND)) {
            throw error;
        }
        super.retry(error);
    }
}
---------------------------------------------------------------------------------------------------------------------------
Endpoint
package com.android.msahakyan.fma.network;

/**
 * @author msahakyan
 */
public interface Endpoint {
    String BASE_URL = "https://freemusicarchive.org/api";
    String CURATORS = "/get/curators.json";
    String ALBUMS = "/get/albums.json";
    String TRACKS = "/get/tracks.json";
    String ARTISTS = "/get/artists.json";
    String GENRES = "/get/genres.json";

    String TRACK_DETAIL = "http://freemusicarchive.org/services/track/single/";
    String SEARCH = "/trackSearch";
}
------------------------------------------------------------------------------------------------------------------
FmaApiService
package com.android.msahakyan.fma.network;

import android.support.annotation.NonNull;
import android.support.v4.util.ArrayMap;

import com.android.msahakyan.fma.model.Album;
import com.android.msahakyan.fma.model.Artist;
import com.android.msahakyan.fma.model.Genre;
import com.android.msahakyan.fma.model.Page;
import com.android.msahakyan.fma.model.SearchResultItem;
import com.android.msahakyan.fma.model.Track;
import com.android.msahakyan.fma.network.parser.PageParser;
import com.android.msahakyan.fma.network.parser.SearchPageParser;
import com.android.msahakyan.fma.network.parser.TrackDetailParser;
import com.android.msahakyan.fma.util.Constants;
import com.android.msahakyan.fma.util.Item;
import com.android.volley.Request;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.List;

/**
 * Created by msahakyan on 25/07/16.
 */

public class FmaApiService {

    private static final int DEFAULT_PAGE_SIZE = 100;

    private ApiService apiService;

    public FmaApiService(ApiService apiService) {
        this.apiService = apiService;
    }

    // Genres
    public CancelableRequest<Page<Item>> getGenres(@NonNull NetworkRequestListener<Page<Item>> requestListener, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(3);
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Genre>() {
        }.getType();

        return apiService.requestGet(Endpoint.GENRES, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    // Artists
    public CancelableRequest<Page<Item>> getArtists(@NonNull NetworkRequestListener<Page<Item>> requestListener, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(3);
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Artist>() {
        }.getType();

        return apiService.requestGet(Endpoint.ARTISTS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getArtistById(@NonNull NetworkRequestListener<Page<Item>> requestListener, long artistId) {
        ArrayMap<String, String> params = new ArrayMap<>(2);
        params.put("artist_id", String.valueOf(artistId));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Artist>() {
        }.getType();

        return apiService.requestGet(Endpoint.ARTISTS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getArtistByName(@NonNull NetworkRequestListener<Page<Item>> requestListener, String artistName) {
        ArrayMap<String, String> params = new ArrayMap<>(2);
        params.put("artist_name", artistName);
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Artist>() {
        }.getType();

        return apiService.requestGet(Endpoint.ARTISTS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    // Albums
    public CancelableRequest<Page<Item>> getAlbums(@NonNull NetworkRequestListener<Page<Item>> requestListener, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(3);
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Album>() {
        }.getType();

        return apiService.requestGet(Endpoint.ALBUMS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getAlbumById(@NonNull NetworkRequestListener<Page<Item>> requestListener, long albumId) {
        ArrayMap<String, String> params = new ArrayMap<>(2);
        params.put("album_id", String.valueOf(albumId));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Album>() {
        }.getType();

        return apiService.requestGet(Endpoint.ALBUMS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getAlbumByName(@NonNull NetworkRequestListener<Page<Item>> requestListener, String albumName) {
        ArrayMap<String, String> params = new ArrayMap<>(2);
        params.put("album_title", albumName);
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Album>() {
        }.getType();

        return apiService.requestGet(Endpoint.ALBUMS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getAlbumsByArtistName(@NonNull NetworkRequestListener<Page<Item>> requestListener, String artistName) {
        ArrayMap<String, String> params = new ArrayMap<>(2);
        params.put("artist_name", artistName);
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Album>() {
        }.getType();

        return apiService.requestGet(Endpoint.ALBUMS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    // Tracks
    public CancelableRequest<Page<Item>> getTracks(@NonNull NetworkRequestListener<Page<Item>> requestListener, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(3);
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGet(Endpoint.TRACKS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getTracksByAlbumId(@NonNull NetworkRequestListener<Page<Item>> requestListener, long albumId, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(4);
        params.put("album_id", String.valueOf(albumId));
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGet(Endpoint.TRACKS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getTracksByAlbumName(@NonNull NetworkRequestListener<Page<Item>> requestListener, String albumName, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(4);
        params.put("album_title", albumName);
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGet(Endpoint.TRACKS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getTracksByArtistId(@NonNull NetworkRequestListener<Page<Item>> requestListener, long artistId, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(4);
        params.put("artist_id", String.valueOf(artistId));
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGet(Endpoint.TRACKS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getTracksByArtistName(@NonNull NetworkRequestListener<Page<Item>> requestListener, String artistName, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(4);
        params.put("artist_name", artistName);
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGet(Endpoint.TRACKS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Item> getTrackById(@NonNull NetworkRequestListener<Item> requestListener, long trackId) {
        ArrayMap<String, String> params = new ArrayMap<>(1);
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGetToFixedEndpoint(Endpoint.TRACK_DETAIL + trackId + ".json", requestListener, new TrackDetailParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest<Page<Item>> getTracksByGenreId(@NonNull NetworkRequestListener<Page<Item>> requestListener, long genreId, int page) {
        ArrayMap<String, String> params = new ArrayMap<>(4);
        params.put("genre_id", String.valueOf(genreId));
        params.put("page", String.valueOf(page));
        params.put("limit", String.valueOf(DEFAULT_PAGE_SIZE));
        params.put("api_key", Constants.FMA_API_KEY);
        Type pageType = new TypeToken<Track>() {
        }.getType();

        return apiService.requestGet(Endpoint.TRACKS, requestListener, new PageParser<>(pageType), params, Request.Priority.NORMAL);
    }

    public CancelableRequest loadSearchResultsByQuery(@NonNull NetworkRequestListener<List<SearchResultItem>> requestListener, String query) {
        ArrayMap<String, String> params = new ArrayMap<>(2);
        params.put("q", String.valueOf(query));
        params.put("limit", String.valueOf(1000));

        return apiService.requestGet(Endpoint.SEARCH, requestListener, new SearchPageParser(), params, Request.Priority.NORMAL);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GsonRequest
package com.android.msahakyan.fma.network;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.HttpHeaderParser;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.io.UnsupportedEncodingException;
import java.util.Map;

import timber.log.Timber;

/**
 * Created by msahakyan on 24/07/16.
 */

class GsonRequest<T> extends Request<GsonRequest.ProtocolObject<T>> {

    private final Gson mGson = new Gson();
    private final NetworkRequestListener<T> mListener;
    private ResponseEnvelopeParser<T> mNetworkResponseEnvelopeParser;
    private final ApiService.NetworkResponseParser<T> mParser;

    private Priority mPriority = Priority.NORMAL;
    private Map<String, String> mParams;
    private Map<String, String> mHeaders;


    /**
     * Make a GET request and return a parsed object from JSON.
     *
     * @param url URL of the request to make
     */
    GsonRequest(int method, String url, NetworkRequestListener<T> listener, ApiService.NetworkResponseParser<T> parser) {
        super(method, url, null);
        mListener = listener;
        mParser = parser;

        mNetworkResponseEnvelopeParser = new DefaultEnvelopeParser();
    }

    public void setNetworkResponseEnvelopeParser(@NonNull ResponseEnvelopeParser<T> networkResponseEnvelopeParser) {
        mNetworkResponseEnvelopeParser = networkResponseEnvelopeParser;
    }

    @Override
    protected void deliverResponse(ProtocolObject<T> response) {
        if (mListener != null)
            mListener.onSuccess(response.data, response.statusCode);

    }

    @Override
    public void deliverError(VolleyError error) {
        Timber.e(error, null);
        markDelivered();
        int statusCode = 0;
        String errorMessage = error.getMessage();
        if (error.networkResponse != null) {
            statusCode = error.networkResponse.statusCode;
            try {
                ProtocolObject<T> responseObject = mNetworkResponseEnvelopeParser.parseResponseEnvelope(error.networkResponse, null);
                if (responseObject == null) {
                    errorMessage = "Unknown Error";
                } else {
                    errorMessage = responseObject.errorMessage;
                }
            } catch (UnsupportedEncodingException e) {
                errorMessage = e.getMessage();
            }
        }
        if (mListener != null) {
            mListener.onError(statusCode, errorMessage);
        } else {
            throw new IllegalArgumentException("A a request has failed and has NO listener");
        }
    }

    @Override
    public Priority getPriority() {
        return mPriority;
    }

    void setPriority(Priority priority) {
        mPriority = priority;
    }

    @Override
    protected Response<ProtocolObject<T>> parseNetworkResponse(NetworkResponse response) {
        try {
            ProtocolObject<T> responseObject = mNetworkResponseEnvelopeParser.parseResponseEnvelope(response, mParser);
            if (responseObject == null) {
                Timber.w("Error parsing data - responseObject is null");
                return Response.error(new ParseError());
            }
            return Response.success(responseObject, HttpHeaderParser.parseCacheHeaders(response));
        } catch (Exception e) {
            Timber.w(e, null);
            return Response.error(new ParseError(e));
        }
    }

    @Override
    protected Map<String, String> getParams() throws AuthFailureError {
        return mParams;
    }

    @Override
    public Map<String, String> getHeaders() throws AuthFailureError {
        return mHeaders == null ? super.getHeaders() : mHeaders;
    }

    void setHeaders(Map<String, String> headers) {
        mHeaders = headers;
    }

    void setParams(Map<String, String> params) {
        mParams = params;
    }

    static class ProtocolObject<T> {

        @Nullable
        T data;

        int statusCode;

        String errorMessage;

        ProtocolObject() {
        }
    }

    private class DefaultEnvelopeParser implements ResponseEnvelopeParser<T> {

        @Override
        public ProtocolObject<T> parseResponseEnvelope(NetworkResponse response, INetworkUtils.NetworkResponseParser<T> parser)
            throws UnsupportedEncodingException {
            String json = new String(response.data, "UTF-8");
            Timber.v("Network response json : " + json);
            JsonObject jsonObject = null;
            try {
                jsonObject = mGson.fromJson(json, JsonObject.class);
            } catch (Exception e) {
                Timber.e(e, "Parse errorMessage. Url: " + getUrl());
            }
            if (jsonObject == null) {
                return null;
            }
            ProtocolObject<T> responseObject = new ProtocolObject<>();
            responseObject.statusCode = response.statusCode;

            if (parser != null) {
                responseObject.data = parser.parseNetworkResponse(jsonObject);
            }

            return responseObject;
        }
    }

    interface ResponseEnvelopeParser<T> {
        ProtocolObject<T> parseResponseEnvelope(NetworkResponse response, INetworkUtils.NetworkResponseParser<T> parser)
            throws UnsupportedEncodingException;
    }
}
-------------------------------------------------------------------------------------------------------------------------
INetworkUtils
package com.android.msahakyan.fma.network;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.android.volley.Request;
import com.google.gson.JsonElement;

import java.util.Map;

/**
 * Created by msahakyan on 01/07/16.
 */

public interface INetworkUtils {

    /**
     * A result of the execution will be returned to the registered callback {@link NetworkRequestListener}
     *
     * @param method          HTTP method {@link com.android.volley.Request.Method}
     * @param endpoint        Request URL (where to do the request)
     * @param requestListener Network callback method {@link NetworkRequestListener}
     * @param parser          Network response parser {@link NetworkResponseParser}
     * @param params          Map of request parameters
     * @param priority        Request priority {@link com.android.volley.Request.Priority}
     * @param <T>             Data type
     * @param appendBaseUrl   Should append endpoint to BaseUrl or not
     * @return <code>com.android.msahakyan.fma.network.CancelableRequest</code>
     */
    @Nullable
    <T> CancelableRequest<T> request(int method, @Nullable String endpoint, @NonNull NetworkRequestListener<T> requestListener,
                                     @Nullable NetworkResponseParser<T> parser, @Nullable Map<String, String> params, Request.Priority priority, boolean appendBaseUrl);

    /**
     * Simplified method for executing GET requests
     *
     * @param endpoint        Request URL (where to do the request)
     * @param requestListener Network callback method {@link NetworkRequestListener}
     * @param parser          Network response parser {@link NetworkResponseParser}
     * @param params          Map of request parameters
     * @param priority        Request priority {@link com.android.volley.Request.Priority}
     * @param <T>             Data type
     * @return <code>com.android.msahakyan.fma.network.CancelableRequest</code>
     */
    <T> CancelableRequest<T> requestGet(@Nullable String endpoint, @NonNull NetworkRequestListener<T> requestListener,
                                        @NonNull NetworkResponseParser<T> parser, @Nullable Map<String, String> params, Request.Priority priority);

    /**
     * Simplified method for executing GET requests
     *
     * @param endpoint        Request URL (where to do the request)
     * @param requestListener Network callback method {@link NetworkRequestListener}
     * @param parser          Network response parser {@link NetworkResponseParser}
     * @param params          Map of request parameters
     * @param priority        Request priority {@link com.android.volley.Request.Priority}
     * @param <T>             Data type
     * @return <code>com.android.msahakyan.fma.network.CancelableRequest</code>
     */
    <T> CancelableRequest<T> requestGetToFixedEndpoint(@Nullable String endpoint, @NonNull NetworkRequestListener<T> requestListener,
                                                       @NonNull NetworkResponseParser<T> parser, @Nullable Map<String, String> params, Request.Priority priority);

    interface NetworkResponseParser<T> {
        T parseNetworkResponse(JsonElement networkResponse);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------
NetworkRequestListener
package com.android.msahakyan.fma.network;

import android.support.annotation.Nullable;

/**
 * Created by msahakyan on 24/07/16.
 */

public interface NetworkRequestListener<T> {

    /**
     * Success callback
     *
     * @param response
     * @param statusCode
     */
    void onSuccess(@Nullable T response, int statusCode);

    /**
     * Error callback
     *
     * @param statusCode
     * @param errorMessage
     */
    void onError(int statusCode, String errorMessage);
}
-------------------------------------------------------------------------------------------------------------------------------------------------
IMusicPlayback
package com.android.msahakyan.fma.player;

import android.media.MediaPlayer;

import com.android.msahakyan.fma.model.Track;

/**
 * Created by msahakyan on 01/09/16.
 */

public interface IMusicPlayback {

    /**
     * Plays a song
     */
    void playTrack();

    /**
     * Sets the track
     *
     * @param track The track which should be played
     */
    void setTrack(Track track);

    /**
     * Shows music playback in status bar
     */
    void showPlaybackNotification();

    /**
     * Returns {@link MediaPlayer#getCurrentPosition()} (in milliseconds)
     *
     * @return <code>int</code>
     */
    int getPosition();

    /**
     * Returns duration (in milliseconds)
     * {@link MediaPlayer#getDuration()}} method
     *
     * @return <code>int</code>
     */
    int getDuration();

    /**
     * Returns true/false regarding to player {@link MediaPlayer}
     * is playing now or not
     *
     * @return <code>boolean</code>
     */
    boolean isPlaying();

    /**
     * Pauses a player {@link MediaPlayer}
     */
    void pausePlayer();

    /**
     * Seek a player to position (in milliseconds)
     *
     * @param position Position is offset in milliseconds from the start to seek to
     */
    void seek(int position);

    /**
     * Starts a player {@link MediaPlayer}
     */
    void startPlayer();
}
------------------------------------------------------------------------------------------------------
NotificationActionReceiver
package com.android.msahakyan.fma.receiver;

/**
 * Created by msahakyan on 10/09/16.
 */

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;

import com.android.msahakyan.fma.service.MusicService;
import com.android.msahakyan.fma.util.ActionConstants;
import com.android.msahakyan.fma.util.LoadNeighborTrackListener;

import timber.log.Timber;

public class NotificationActionReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {

        IBinder binder = peekService(context, new Intent(context, MusicService.class));
        if (binder == null) {
            return;
        }
        MusicService service = ((MusicService.MusicBinder) binder).getService();

        if (service == null) {
            Timber.w("Service is null -- skip");
            return;
        }

        String action = intent.getAction();
        switch (action) {
            case ActionConstants.ACTION_PLAY:
                service.startPlayer();
                break;
            case ActionConstants.ACTION_PAUSE:
                service.pausePlayer();
                break;
            case ActionConstants.ACTION_NEXT:
                service.loadNeighborTrack(LoadNeighborTrackListener.NEXT);
                break;
            case ActionConstants.ACTION_PREVIOUS:
                service.loadNeighborTrack(LoadNeighborTrackListener.PREVIOUS);
                break;
            case ActionConstants.ACTION_DELETE:
                service.cancelOngoingNotification();
                break;
            default:
                break;
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------
MusicDownloaderService
package com.android.msahakyan.fma.service;

import android.app.IntentService;
import android.content.Intent;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.widget.Toast;

import com.android.msahakyan.fma.R;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import timber.log.Timber;

import static android.os.Environment.DIRECTORY_MUSIC;

/**
 * Created by msahakyan on 29/09/16.
 */

public class MusicDownloaderService extends IntentService {

    public static final String KEY_TRACK_URL = "KEY_TRACK_URL";
    public static final String KEY_TRACK_NAME = "KEY_TRACK_NAME";
    private static final String CONTENT_TYPE_MP3 = ".mp3";
    private static final String APP_FOLDER = "/Mp3Music";

    /**
     * Creates an IntentService.
     */
    public MusicDownloaderService() {
        super("Track downloader service");
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        if (intent != null) {
            String trackUrl = intent.getStringExtra(KEY_TRACK_URL);
            String trackName = intent.getStringExtra(KEY_TRACK_NAME);
            if (trackUrl == null) {
                Timber.w("Track url which we are going to download is null --skip");
                return;
            }
            if (trackName == null) {
                Timber.w("Track name which we are going to download is null --skip");
                return;
            }
            try {
                downloadTrack(trackUrl, trackName);
            } catch (IOException e) {
                Timber.e(e, "Can't download track with url: " + trackUrl);
            }
        }
    }

    private void downloadTrack(String trackUrl, String trackName) throws IOException {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
            .url(trackUrl)
            .build();

        Response response = client.newCall(request).execute();

        if (response.isSuccessful()) {
            InputStream inputStream = response.body().byteStream();
            saveTrackToLocalStorage(inputStream, trackName);
        } else {
            Timber.w(response.code() + " : " + response.message());
            showToast(response.message());
        }

        response.body().close();
    }

    private void saveTrackToLocalStorage(InputStream is, String trackName) {
        if (!isExternalStorageWritable()) {
            showToast("Enable write storage permission for this app");
            return;
        }

        File root = android.os.Environment.getExternalStoragePublicDirectory(DIRECTORY_MUSIC);

        File dir = new File(root.getAbsolutePath() + APP_FOLDER);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        File file = new File(dir, trackName + CONTENT_TYPE_MP3);

        if (file.exists()) {
            showToast(getString(R.string.file_already_exists, file.getName()));
            return;
        }
        showToast(getString(R.string.download_in_process));

        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(file);

            byte[] buffer = new byte[1024];
            int len;
            while ((len = is.read(buffer)) > 0) {
                fos.write(buffer, 0, len);
            }
            showToast(getString(R.string.track_save_success, file.getName()));
        } catch (IOException e) {
            Timber.e(e, "Can't save file: " + file.getName() + " to ");
        } finally {
            try {
                if (fos != null) {
                    fos.flush();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // Checks if external storage is available for read and write
    private boolean isExternalStorageWritable() {
        String state = Environment.getExternalStorageState();
        return Environment.MEDIA_MOUNTED.equals(state);
    }

    private void showToast(String message) {
        new Handler(Looper.getMainLooper()).post(() ->
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show());
    }
}
----------------------------------------------------------------------------------------------------------------------
MusicService
package com.android.msahakyan.fma.service;

import android.app.Notification;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.graphics.Bitmap;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Binder;
import android.os.IBinder;
import android.os.PowerManager;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.view.View;
import android.widget.RemoteViews;

import com.android.msahakyan.fma.R;
import com.android.msahakyan.fma.model.Track;
import com.android.msahakyan.fma.player.IMusicPlayback;
import com.android.msahakyan.fma.util.ActionConstants;
import com.android.msahakyan.fma.util.AppUtils;
import com.android.msahakyan.fma.util.LoadNeighborTrackListener;
import com.android.msahakyan.fma.util.LoadNeighborTrackListener.AdjacentMode;
import com.android.msahakyan.fma.util.MediaPlayerPreparedListener;
import com.android.msahakyan.fma.util.MediaPlayerStateChangeListener;

import timber.log.Timber;

/**
 * @author msahakyan
 */
public class MusicService extends Service implements
    MediaPlayer.OnPreparedListener, MediaPlayer.OnErrorListener,
    MediaPlayer.OnCompletionListener, IMusicPlayback {

    private static final int NOTIFICATION_ID = 1001;

    private final IBinder mBinder = new MusicBinder();

    private MediaPlayerPreparedListener mPreparedListener;
    private MediaPlayerStateChangeListener mStateChangeListener;
    private LoadNeighborTrackListener mLoadNeighborTrackListener;

    private MediaPlayer mPlayer;
    private boolean mPrepared;
    private Track mTrack;
    private String mTrackTitle;
    private boolean mShuffle;

    @Override
    public void onCreate() {
        super.onCreate();
        mPlayer = new MediaPlayer();
        mPrepared = false;
        initMusicPlayer();
    }

    private void initMusicPlayer() {
        // Set player properties
        mPlayer.setWakeMode(getApplicationContext(), PowerManager.PARTIAL_WAKE_LOCK);
        mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);

        // Set listeners
        mPlayer.setOnPreparedListener(this);
        mPlayer.setOnCompletionListener(this);
        mPlayer.setOnErrorListener(this);
    }

    public void setPreparedListener(MediaPlayerPreparedListener preparedListener) {
        mPreparedListener = preparedListener;
    }

    public void setStateChangeListener(MediaPlayerStateChangeListener stateChangeListener) {
        mStateChangeListener = stateChangeListener;
    }

    public void setLoadNeighborTrackListener(LoadNeighborTrackListener loadNeighborTrackListener) {
        mLoadNeighborTrackListener = loadNeighborTrackListener;
    }

    public class MusicBinder extends Binder {
        public MusicService getService() {
            return MusicService.this;
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    @Override
    public boolean onUnbind(Intent intent) {
        // Release resources here
        mPlayer.stop();
        mPlayer.release();
        return false;
    }

    @Override
    public void playTrack() {
        mPlayer.reset();
        Track playingTrack = mTrack;
        mTrackTitle = playingTrack.getTitle();

        // Set the data source
        try {
            mPlayer.setDataSource(playingTrack.getListenUrl());
        } catch (Exception e) {
            Timber.e(e, "Error setting data source");
        }
        try {
            mPrepared = false;
            mPlayer.prepareAsync();
        } catch (Exception e) {
            Timber.w("Can't prepare media player, exception: " + e);
        }
    }

    @Override
    public void setTrack(Track track) {
        mTrack = track;
    }

    @Override
    public void onCompletion(MediaPlayer player) {
        //check if playback has reached the end of a track
        if (mPlayer.getCurrentPosition() > 0) {
            player.reset();
            if (mLoadNeighborTrackListener != null) {
                mLoadNeighborTrackListener.loadNeighborTrack(LoadNeighborTrackListener.NEXT);
            }
        }
    }

    @Override
    public boolean onError(MediaPlayer player, int what, int extra) {
        Log.v("MUSIC PLAYER", "Playback Error");
        player.reset();
        return false;
    }

    @Override
    public void onPrepared(MediaPlayer player) {
        mPrepared = true;
        // Start player
        player.start();
        showPlaybackNotification();
        if (mPreparedListener != null) {
            mPreparedListener.onPlayerPrepared();
        }
    }

    @Override
    public void showPlaybackNotification() {
        RemoteViews simpleContentView = new RemoteViews(getApplicationContext().getPackageName(), R.layout.custom_notification);
        RemoteViews expandedView = new RemoteViews(getApplicationContext().getPackageName(), R.layout.big_notification);

        Notification notification = new NotificationCompat.Builder(getApplicationContext())
            .setSmallIcon(R.drawable.notification_image_small)
            .setContentTitle(getString(R.string.playing))
            .setTicker(mTrackTitle)
            .build();

        setListeners(simpleContentView);
        setListeners(expandedView);

        notification.contentView = simpleContentView;
        if (AppUtils.isJellyBeanOrLater()) {
            notification.bigContentView = expandedView;
        }

        Bitmap trackBitmap = mTrack.getImageBitmap();
        if (trackBitmap != null) {
            notification.contentView.setImageViewBitmap(R.id.image_view_track, trackBitmap);
            if (AppUtils.isJellyBeanOrLater()) {
                notification.bigContentView.setImageViewBitmap(R.id.image_view_track, trackBitmap);
            }
        } else {
            notification.contentView.setImageViewResource(R.id.image_view_track, R.drawable.img_placeholder);
            if (AppUtils.isJellyBeanOrLater()) {
                notification.bigContentView.setImageViewResource(R.id.image_view_track, R.drawable.img_placeholder);
            }
        }

        if (!isPlaying()) {
            notification.contentView.setViewVisibility(R.id.btn_pause, View.GONE);
            notification.contentView.setViewVisibility(R.id.btn_play, View.VISIBLE);

            if (AppUtils.isJellyBeanOrLater()) {
                notification.bigContentView.setViewVisibility(R.id.btn_pause, View.GONE);
                notification.bigContentView.setViewVisibility(R.id.btn_play, View.VISIBLE);
            }
        } else {
            notification.contentView.setViewVisibility(R.id.btn_pause, View.VISIBLE);
            notification.contentView.setViewVisibility(R.id.btn_play, View.GONE);

            if (AppUtils.isJellyBeanOrLater()) {
                notification.bigContentView.setViewVisibility(R.id.btn_pause, View.VISIBLE);
                notification.bigContentView.setViewVisibility(R.id.btn_play, View.GONE);
            }
        }

        notification.contentView.setTextViewText(R.id.text_song_name, mTrack.getTitle());
        notification.contentView.setTextViewText(R.id.text_album_name, mTrack.getAlbumTitle());

        if (AppUtils.isJellyBeanOrLater()) {
            notification.bigContentView.setTextViewText(R.id.text_song_name, mTrack.getTitle());
            notification.bigContentView.setTextViewText(R.id.text_album_name, mTrack.getAlbumTitle());
        }
        notification.flags |= Notification.FLAG_ONGOING_EVENT;
        startForeground(NOTIFICATION_ID, notification);

        if (mStateChangeListener != null) {
            mStateChangeListener.onPlayerStateChanged(isPlaying());
        }
    }

    /**
     * Notification listeners
     *
     * @param view The {@link RemoteViews} remoteView
     */
    public void setListeners(RemoteViews view) {

        Intent play = new Intent(ActionConstants.ACTION_PLAY);
        Intent pause = new Intent(ActionConstants.ACTION_PAUSE);
        Intent next = new Intent(ActionConstants.ACTION_NEXT);
        Intent previous = new Intent(ActionConstants.ACTION_PREVIOUS);
        Intent delete = new Intent(ActionConstants.ACTION_DELETE);

        PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(getApplicationContext(), 0, play, PendingIntent.FLAG_UPDATE_CURRENT);
        view.setOnClickPendingIntent(R.id.btn_play, pendingIntentPlay);

        PendingIntent pendingIntentPause = PendingIntent.getBroadcast(getApplicationContext(), 0, pause, PendingIntent.FLAG_UPDATE_CURRENT);
        view.setOnClickPendingIntent(R.id.btn_pause, pendingIntentPause);

        PendingIntent pendingIntentDelete = PendingIntent.getBroadcast(getApplicationContext(), 0, delete, PendingIntent.FLAG_UPDATE_CURRENT);
        view.setOnClickPendingIntent(R.id.btn_delete, pendingIntentDelete);

        PendingIntent pendingIntentPrevious = PendingIntent.getBroadcast(getApplicationContext(), 0, previous, PendingIntent.FLAG_UPDATE_CURRENT);
        view.setOnClickPendingIntent(R.id.btn_previous, pendingIntentPrevious);

        PendingIntent pendingIntentNext = PendingIntent.getBroadcast(getApplicationContext(), 0, next, PendingIntent.FLAG_UPDATE_CURRENT);
        view.setOnClickPendingIntent(R.id.btn_next, pendingIntentNext);
    }

    // Playback methods
    @Override
    public int getPosition() {
        return mPlayer.getCurrentPosition();
    }

    @Override
    public int getDuration() {
        return mPrepared ? mPlayer.getDuration() : 0;
    }

    @Override
    public boolean isPlaying() {
        return mPlayer.isPlaying();
    }

    @Override
    public void pausePlayer() {
        mPlayer.pause();
        showPlaybackNotification();
    }

    public void resetPlayer() {
        mPlayer.reset();
    }

    @Override
    public void seek(int position) {
        mPlayer.seekTo(position);
    }

    @Override
    public void startPlayer() {
        mPlayer.start();
        showPlaybackNotification();
    }

    @Override
    public void onDestroy() {
        stopForeground(true);
    }

    // Toggle shuffle
    public void toggleShuffle() {
        mShuffle = !mShuffle;
    }

    public void cancelOngoingNotification() {
        mPlayer.pause();
        stopForeground(true);
        if (mStateChangeListener != null) {
            mStateChangeListener.onPlayerStateChanged(false);
        }
    }

    public void loadNeighborTrack(@AdjacentMode int mode) {
        if (mLoadNeighborTrackListener != null) {
            mLoadNeighborTrackListener.loadNeighborTrack(mode);
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------
DetailsTransition
package com.android.msahakyan.fma.transition;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.transition.ChangeBounds;
import android.transition.ChangeImageTransform;
import android.transition.ChangeTransform;
import android.transition.TransitionSet;
import android.util.AttributeSet;

/**
 * @author msahakyan
 */

@TargetApi(Build.VERSION_CODES.LOLLIPOP)
public class DetailsTransition extends TransitionSet {
    public DetailsTransition() {
        init();
    }

    /**
     * This constructor allows us to use this transition in XML
     */
    public DetailsTransition(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    private void init() {
        setOrdering(ORDERING_TOGETHER);
        addTransition(new ChangeBounds()).
            addTransition(new ChangeTransform()).
            addTransition(new ChangeImageTransform());
    }
}
------------------------------------------------------------------------------------------------------------------------------
